<?xml version="1.0"?>
<?xml-stylesheet type='text/xsl' href='interface.xsl'?>
<interface xmlns="http://zero-install.sourceforge.net/2004/injector/interface" xmlns:compile="http://zero-install.sourceforge.net/2006/namespaces/0compile" xmlns:release="http://zero-install.sourceforge.net/2007/namespaces/0release" uri="http://gfxmonk.net/dist/0install/python-dumbattr.xml">
	<name>python-dumbattr</name>
	<summary>resiliant xattr storage</summary>
	<publish xmlns="http://gfxmonk.net/dist/0install" mode=""/>
	<description>
dumbattr
--------

Dumbattr is a layer on top of `xattr`. As well as saving and loading xattr-based metadata, it maintains the same information in the least clever way possible: a directory-level JSON file. If for some reason you lose your xattrs (via a backup roundtrip, or a copy program that doesn't respect xattrs), the next time you use `dumbattr` to load a file's metadata (for any file in that directory), it'll repopulate all missing `xattr` data as long as you've copied whole directory.

Dumbattr only supports user-level data (i.e xattrs that start with `"user."`). You do not need to specify this in your attribute names, it is implied. That is:

	&gt;&gt;&gt; import dumbattr
	&gt;&gt;&gt; dumbattr.set("/path/to/file", "attr_name", "attr_value")

Will set the underlying `xattr` key `"user.attr_name"` to `"attr_value"`.

Command-line tool
-----------------

As well as being a python library, `dumbattr` is a runnable program (via the [ZeroInstall feed](http://gfxmonk.net/dist/0install/python-dumbattr.xml)). It has a few sub-commands:

 - ls: show the user attributes on a file or files
 - set / get: query / modify a specific key of a file or files
 - fix: recursively scan a location for discrepencies between xattr / JSON metadata, and update the results (by setting xattrs, updating the JSON serialization, or both). You should *definitely* run this after restoring files from a backup system that does not preserve `xattr` data, for example.

Run it with `--help` for the full rundown.

Caveats
-------

 - Persisted metadata takes precedence. If you have set the *same* key on a file using both plain xattr and `dumbattr`, `dumbattr` attributes will take priority when you read the file (and will overwrite the plain xattr accordingly. This only applies to conflicting keys for the one file - i.e it won't touch plain xattrs under a different key for that same file.

 - Obviously, the restore from lost xattrs only works on a per-directory level. If you move just one file and not its containing directory and simultaneously strip its xattr data, then dumbattr can't help you there.

	</description>
	<homepage>https://github.com/gfxmonk/dumbattr</homepage>
	<feed-for interface="http://gfxmonk.net/dist/0install/python-dumbattr.xml"/>
	<rich-description xmlns="http://gfxmonk.net/dist/0install">
		<div xmlns="http://www.w3.org/1999/xhtml">
			<h2 id="dumbattr">dumbattr</h2>
			<p>Dumbattr is a layer on top of <code>xattr</code>. As well as saving and loading xattr-based metadata, it maintains the same information in the least clever way possible: a directory-level JSON file. If for some reason you lose your xattrs (via a backup roundtrip, or a copy program that doesn't respect xattrs), the next time you use <code>dumbattr</code> to load a file's metadata (for any file in that directory), it'll repopulate all missing <code>xattr</code> data as long as you've copied whole directory.</p>
			<p>Dumbattr only supports user-level data (i.e xattrs that start with <code>"user."</code>). You do not need to specify this in your attribute names, it is implied. That is:</p>
			<pre>
				<code>&gt;&gt;&gt; import dumbattr
&gt;&gt;&gt; dumbattr.set("/path/to/file", "attr_name", "attr_value")</code>
			</pre>
			<p>Will set the underlying <code>xattr</code> key <code>"user.attr_name"</code> to <code>"attr_value"</code>.</p>
			<h2 id="command-line-tool">Command-line tool</h2>
			<p>As well as being a python library, <code>dumbattr</code> is a runnable program (via the <a href="http://gfxmonk.net/dist/0install/python-dumbattr.xml">ZeroInstall feed</a>). It has a few sub-commands:</p>
			<ul>
				<li>ls: show the user attributes on a file or files</li>
				<li>set / get: query / modify a specific key of a file or files</li>
				<li>fix: recursively scan a location for discrepencies between xattr / JSON metadata, and update the results (by setting xattrs, updating the JSON serialization, or both). You should <em>definitely</em> run this after restoring files from a backup system that does not preserve <code>xattr</code> data, for example.</li>
			</ul>
			<p>Run it with <code>--help</code> for the full rundown.</p>
			<h2 id="caveats">Caveats</h2>
			<ul>
				<li>
					<p>Persisted metadata takes precedence. If you have set the <em>same</em> key on a file using both plain xattr and <code>dumbattr</code>, <code>dumbattr</code> attributes will take priority when you read the file (and will overwrite the plain xattr accordingly. This only applies to conflicting keys for the one file - i.e it won't touch plain xattrs under a different key for that same file.</p>
				</li>
				<li>
					<p>Obviously, the restore from lost xattrs only works on a per-directory level. If you move just one file and not its containing directory and simultaneously strip its xattr data, then dumbattr can't help you there.</p>
				</li>
			</ul>
		</div>
	</rich-description>
	<group>
		<requires interface="http://repo.roscidus.com/python/python"/>
		<requires interface="http://gfxmonk.net/dist/0install/python-xattr.xml"/>
		<environment insert="" mode="prepend" name="PYTHONPATH"/>
		<command name="run" path="dumbattr.py">
			<runner interface="http://repo.roscidus.com/python/python"/>
		</command>
		<command name="test">
			<runner command="core" interface="http://gfxmonk.net/dist/0install/nosetests-runner.xml"/>
		</command>
		<implementation id="sha1new=f98141b5f7ca552abc9a779cfb36a78ed0151c0f" released="2012-12-16" version="0.2">
			<manifest-digest sha256="82266a81584e06b29129330ee075c42236f3a92641a24f4267f4158df62dfdc6"/>
			<archive href="http://gfxmonk.net/dist/0install/python-dumbattr/python-dumbattr-0.2.tgz" size="4229"/>
		</implementation>
		<implementation id="sha1new=3b4cd6e0a3e9a4e9da238c37ce076a956cfb530d" released="2012-12-20" stability="buggy" version="0.2.1">
			<manifest-digest sha256="0a18966301ea596bba072961852a689a1e851a19bee0cac6a14722af7629e4f5"/>
			<archive href="http://gfxmonk.net/dist/0install/python-dumbattr/python-dumbattr-0.2.1.tgz" size="4414"/>
		</implementation>
		<implementation id="sha1new=947a3fa5a602c5f3f0ae82896b1c53796d112219" released="2012-12-23" version="0.2.2">
			<manifest-digest sha256="961023dfa89598dda845f6451bc00552c6f9547afcb701258f6370ba42c7ed89"/>
			<archive href="http://gfxmonk.net/dist/0install/python-dumbattr/python-dumbattr-0.2.2.tgz" size="4432"/>
		</implementation>
	</group>
</interface>
